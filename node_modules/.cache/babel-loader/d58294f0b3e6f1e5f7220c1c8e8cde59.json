{"ast":null,"code":"var util = require('util');\n\nvar isProperty = require('is-property');\n\nvar INDENT_START = /[\\{\\[]/;\nvar INDENT_END = /[\\}\\]]/; // from https://mathiasbynens.be/notes/reserved-keywords\n\nvar RESERVED = ['do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'null', 'this', 'true', 'void', 'with', 'await', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof', 'NaN', 'undefined'];\nvar RESERVED_MAP = {};\n\nfor (var i = 0; i < RESERVED.length; i++) {\n  RESERVED_MAP[RESERVED[i]] = true;\n}\n\nvar isVariable = function isVariable(name) {\n  return isProperty(name) && !RESERVED_MAP.hasOwnProperty(name);\n};\n\nvar formats = {\n  s: function s(_s) {\n    return '' + _s;\n  },\n  d: function d(_d) {\n    return '' + Number(_d);\n  },\n  o: function o(_o) {\n    return JSON.stringify(_o);\n  }\n};\n\nvar genfun = function genfun() {\n  var lines = [];\n  var indent = 0;\n  var vars = {};\n\n  var push = function push(str) {\n    var spaces = '';\n\n    while (spaces.length < indent * 2) {\n      spaces += '  ';\n    }\n\n    lines.push(spaces + str);\n  };\n\n  var pushLine = function pushLine(line) {\n    if (INDENT_END.test(line.trim()[0]) && INDENT_START.test(line[line.length - 1])) {\n      indent--;\n      push(line);\n      indent++;\n      return;\n    }\n\n    if (INDENT_START.test(line[line.length - 1])) {\n      push(line);\n      indent++;\n      return;\n    }\n\n    if (INDENT_END.test(line.trim()[0])) {\n      indent--;\n      push(line);\n      return;\n    }\n\n    push(line);\n  };\n\n  var line = function line(fmt) {\n    if (!fmt) return line;\n\n    if (arguments.length === 1 && fmt.indexOf('\\n') > -1) {\n      var lines = fmt.trim().split('\\n');\n\n      for (var i = 0; i < lines.length; i++) {\n        pushLine(lines[i].trim());\n      }\n    } else {\n      pushLine(util.format.apply(util, arguments));\n    }\n\n    return line;\n  };\n\n  line.scope = {};\n  line.formats = formats;\n\n  line.sym = function (name) {\n    if (!name || !isVariable(name)) name = 'tmp';\n    if (!vars[name]) vars[name] = 0;\n    return name + (vars[name]++ || '');\n  };\n\n  line.property = function (obj, name) {\n    if (arguments.length === 1) {\n      name = obj;\n      obj = '';\n    }\n\n    name = name + '';\n    if (isProperty(name)) return obj ? obj + '.' + name : name;\n    return obj ? obj + '[' + JSON.stringify(name) + ']' : JSON.stringify(name);\n  };\n\n  line.toString = function () {\n    return lines.join('\\n');\n  };\n\n  line.toFunction = function (scope) {\n    if (!scope) scope = {};\n    var src = 'return (' + line.toString() + ')';\n    Object.keys(line.scope).forEach(function (key) {\n      if (!scope[key]) scope[key] = line.scope[key];\n    });\n    var keys = Object.keys(scope).map(function (key) {\n      return key;\n    });\n    var vals = keys.map(function (key) {\n      return scope[key];\n    });\n    return Function.apply(null, keys.concat(src)).apply(null, vals);\n  };\n\n  if (arguments.length) line.apply(null, arguments);\n  return line;\n};\n\ngenfun.formats = formats;\nmodule.exports = genfun;","map":null,"metadata":{},"sourceType":"script"}