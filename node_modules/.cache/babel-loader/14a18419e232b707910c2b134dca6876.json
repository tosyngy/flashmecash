{"ast":null,"code":"import _classCallCheck from \"/home/oginni/NodeProject/flashmecash/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/oginni/NodeProject/flashmecash/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport decode from 'jwt-decode';\n\nvar AuthService =\n/*#__PURE__*/\nfunction () {\n  // Initializing important variables\n  function AuthService(domain) {\n    _classCallCheck(this, AuthService);\n\n    this.domain = domain || 'http://localhost:8080'; // API server domain\n\n    this.domain = domain || 'https://staging.seerbitapigateway.com/FCMB_BACK/rest/api/';\n    this.fetch = this.fetch.bind(this); // React binding stuff\n\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  _createClass(AuthService, [{\n    key: \"isTokenExpired\",\n    value: function isTokenExpired(token) {\n      try {\n        var decoded = decode(token);\n\n        if (decoded.exp < Date.now() / 1000) {\n          // Checking if token is expired. N\n          return true;\n        } else return false;\n      } catch (err) {\n        return false;\n      }\n    }\n  }, {\n    key: \"getProfile\",\n    value: function getProfile() {\n      // Using jwt-decode npm package to decode the token\n      return decode(this.getToken());\n      this.props.history.push(\"/login\");\n    }\n  }, {\n    key: \"_checkStatus\",\n    value: function _checkStatus(response) {\n      // raises an error in case response status is not a success\n      if (response.status >= 200 && response.status < 300) {\n        // Success status lies between 200 to 300\n        return response;\n      } else {\n        var error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }\n  }], [{\n    key: \"loggedIn\",\n    value: function loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      var token = localStorage.getItem('id_token'); // GEtting token from localstorage\n\n      return !!token && !this.isTokenExpired(token); // handwaiving here\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(idToken) {\n      // Saves user token to localStorage\n      localStorage.setItem('id_token', idToken);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem('id_token');\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem('id_token');\n    }\n  }]);\n\n  return AuthService;\n}();\n\nexport { AuthService as default };","map":{"version":3,"sources":["/home/oginni/NodeProject/flashmecash/src/component/AuthService.js"],"names":["decode","AuthService","domain","fetch","bind","login","getProfile","token","decoded","exp","Date","now","err","getToken","props","history","push","response","status","error","Error","statusText","localStorage","getItem","isTokenExpired","idToken","setItem","removeItem"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,YAAnB;;IACqBC,W;;;AACjB;AACA,uBAAYC,MAAZ,EAAoB;AAAA;;AAChB,SAAKA,MAAL,GAAcA,MAAM,IAAI,uBAAxB,CADgB,CACgC;;AAChD,SAAKA,MAAL,GAAcA,MAAM,IAAI,2DAAxB;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb,CAHgB,CAGmB;;AACnC,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACH;;;;mCAQcG,K,EAAO;AAClB,UAAI;AACA,YAAMC,OAAO,GAAGR,MAAM,CAACO,KAAD,CAAtB;;AACA,YAAIC,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AAAE;AACnC,iBAAO,IAAP;AACH,SAFD,MAII,OAAO,KAAP;AACP,OAPD,CAQA,OAAOC,GAAP,EAAY;AACR,eAAO,KAAP;AACH;AACJ;;;iCAiBY;AACT;AACA,aAAOZ,MAAM,CAAC,KAAKa,QAAL,EAAD,CAAb;AACA,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;;;iCAEYC,Q,EAAU;AACnB;AACA,UAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAhD,EAAqD;AAAE;AACnD,eAAOD,QAAP;AACH,OAFD,MAEO;AACH,YAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAZ;AACAF,QAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,cAAME,KAAN;AACH;AACJ;;;+BAlDiB;AACd;AACA,UAAMZ,KAAK,GAAGe,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd,CAFc,CAEiC;;AAC/C,aAAO,CAAC,CAAChB,KAAF,IAAW,CAAC,KAAKiB,cAAL,CAAoBjB,KAApB,CAAnB,CAHc,CAGgC;AACjD;;;6BAgBekB,O,EAAS;AACrB;AACAH,MAAAA,YAAY,CAACI,OAAb,CAAqB,UAArB,EAAiCD,OAAjC;AACH;;;+BAEiB;AACd;AACA,aAAOH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAP;AACH;;;6BAEe;AACZ;AACAD,MAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB;AACH;;;;;;SA3CgB1B,W","sourcesContent":["import decode from 'jwt-decode';\nexport default class AuthService {\n    // Initializing important variables\n    constructor(domain) {\n        this.domain = domain || 'http://localhost:8080' // API server domain\n        this.domain = domain || 'https://staging.seerbitapigateway.com/FCMB_BACK/rest/api/'\n        this.fetch = this.fetch.bind(this) // React binding stuff\n        this.login = this.login.bind(this)\n        this.getProfile = this.getProfile.bind(this)\n    }\n\n    static loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = localStorage.getItem('id_token') // GEtting token from localstorage\n        return !!token && !this.isTokenExpired(token) // handwaiving here\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000) { // Checking if token is expired. N\n                return true;\n            }\n            else\n                return false;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n\n    static setToken(idToken) {\n        // Saves user token to localStorage\n        localStorage.setItem('id_token', idToken)\n    }\n\n    static getToken() {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('id_token')\n    }\n\n    static logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n    }\n\n    getProfile() {\n        // Using jwt-decode npm package to decode the token\n        return decode(this.getToken());\n        this.props.history.push(\"/login\")\n    }\n\n    _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) { // Success status lies between 200 to 300\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}