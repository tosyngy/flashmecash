{"ast":null,"code":"/*!\n * node-jsonp - index.js\n * Author:\n *    ngot <zhuanghengfei@gmail.com>\n */\n'use strict';\n/**\n * Module dependencies.\n */\n\nvar request = require('request');\n\nvar debug = require('debug')('node-jsonp');\n/**\n * JSONP sets up and allows you to execute a JSONP request\n * @param {String} url  The URL you are requesting with the JSON data\n * @param {Object} data The Data object you want to generate the URL params from\n * @param {String} method  The method name for the callback function. Defaults to callback (for example, flickr's is \"jsoncallback\")\n * @param {Function} callback  The callback you want to execute as an anonymous function. The first parameter of the anonymous callback function is the JSON\n *\n * @example\n * JSONP('http://twitter.com/users/oscargodson.json',function(json){\n *  console.log(json)\n * })\n *\n * @example\n * JSONP('http://api.flickr.com/services/feeds/photos_public.gne',{'id':'12389944@N03','format':'json'},'jsoncallback',function(json){\n *  console.log(json)\n * })\n *\n * @example\n * JSONP('http://graph.facebook.com/FacebookDevelopers', 'callback', function(json){\n *  console.log(json)\n * })\n */\n\n\nfunction JSONP(url, data, method, callback) {\n  function noop() {} //  Set the defaults\n\n\n  url = url || '';\n  data = data || {};\n  method = method || '';\n  callback = callback || noop; // Gets all the keys that belong\n  // to an object\n\n  var getKeys = function getKeys(obj) {\n    var keys = [];\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        keys.push(key);\n      }\n    }\n\n    return keys;\n  }; // Turn the data object into a query string.\n  // Add check to see if the second parameter is indeed\n  // a data object. If not, keep the default behaviour\n\n\n  if (typeof data === 'object') {\n    var queryString = '';\n    var keys = getKeys(data);\n\n    for (var i = 0; i < keys.length; i++) {\n      queryString += encodeURIComponent(keys[i]) + '=' + encodeURIComponent(data[keys[i]]);\n\n      if (i !== keys.length - 1) {\n        queryString += '&';\n      }\n    }\n\n    url += '?' + queryString;\n  } else if (typeof data === 'function') {\n    method = data;\n    callback = method;\n  } // If no method was set and they used the callback param in place of\n  // the method param instead, we say method is callback and set a\n  // default method of \"callback\"\n\n\n  if (typeof method === 'function') {\n    callback = method;\n    method = 'callback';\n  } // Use timestamp + a random factor to account for a lot of requests in a short time\n  // e.g. jsonp1394571775161\n\n\n  var generatedFunction = 'jsonp' + Math.round(Date.now() + Math.random() * 1000001); // Generate the temp JSONP function using the name above\n  // First, call the function the user defined in the callback param [callback(json)]\n  // Then delete the generated function from the global [delete global[generatedFunction]]\n\n  global[generatedFunction] = function (json) {\n    callback(json);\n    delete global[generatedFunction];\n  }; // Check if the user set their own params, and if not add a ? to start a list of params\n  // If in fact they did we add a & to add onto the params\n  // example1: url = http://url.com THEN http://url.com?callback=X\n  // example2: url = http://url.com?example=param THEN http://url.com?example=param&callback=X\n\n\n  if (url.indexOf('?') === -1) {\n    url = url + '?';\n  } else {\n    url = url + '&';\n  }\n\n  url = url + method + '=' + generatedFunction;\n  debug('jsonp url: \"%s\"', url);\n  var options = {\n    url: url,\n    headers: {\n      'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36'\n    }\n  };\n  request(options, function (err, res, body) {\n    if (err) throw err;else if (res.statusCode === 200) {\n      debug('body: \"%j\"', body);\n      /*eslint-disable no-new-func*/\n\n      var cb = new Function(body);\n      cb();\n    }\n  });\n}\n\nmodule.exports = JSONP;","map":null,"metadata":{},"sourceType":"script"}