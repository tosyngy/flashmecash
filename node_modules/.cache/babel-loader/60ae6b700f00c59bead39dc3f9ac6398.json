{"ast":null,"code":"import _classCallCheck from \"/home/oginni/NodeProject/flashmecash/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/oginni/NodeProject/flashmecash/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/oginni/NodeProject/flashmecash/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/oginni/NodeProject/flashmecash/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/oginni/NodeProject/flashmecash/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/oginni/NodeProject/flashmecash/src/component/pages/includes/ConnectivityListener.js\";\nimport React, { Component } from 'react';\nimport { withToastManager } from 'react-toast-notifications';\n\nvar ConnectivityListener =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ConnectivityListener, _Component);\n\n  function ConnectivityListener() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ConnectivityListener);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ConnectivityListener)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isOnline: window ? window.navigator.onLine : false\n    };\n\n    _this.onlineCallback = function () {\n      _this.props.toastManager.remove(_this.offlineToastId);\n\n      _this.offlineToastId = null;\n    };\n\n    _this.offlineCallback = function (id) {\n      _this.offlineToastId = id;\n    };\n\n    return _this;\n  }\n\n  _createClass(ConnectivityListener, [{\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps, prevState) {\n      var isOnline = this.state.isOnline;\n\n      if (prevState.isOnline !== isOnline) {\n        return {\n          isOnline: isOnline\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(props, state, snapshot) {\n      if (!snapshot) return;\n      var toastManager = props.toastManager;\n      var isOnline = snapshot.isOnline;\n      var content = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, isOnline ? 'Online' : \"Offline\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, isOnline ? 'Editing is available again' : 'Changes you make may not be saved'));\n      var callback = isOnline ? this.onlineCallback : this.offlineCallback;\n      toastManager.add(content, {\n        appearance: 'info',\n        autoDismiss: isOnline\n      }, callback);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return ConnectivityListener;\n}(Component);\n\nexport default withToastManager(ConnectivityListener);","map":{"version":3,"sources":["/home/oginni/NodeProject/flashmecash/src/component/pages/includes/ConnectivityListener.js"],"names":["React","Component","withToastManager","ConnectivityListener","state","isOnline","window","navigator","onLine","onlineCallback","props","toastManager","remove","offlineToastId","offlineCallback","id","prevProps","prevState","snapshot","content","callback","add","appearance","autoDismiss"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;;IAEMC,oB;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AAAEC,MAAAA,QAAQ,EAAEC,MAAM,GAAGA,MAAM,CAACC,SAAP,CAAiBC,MAApB,GAA6B;AAA/C,K;;UAIRC,c,GAAiB,YAAM;AACrB,YAAKC,KAAL,CAAWC,YAAX,CAAwBC,MAAxB,CAA+B,MAAKC,cAApC;;AACA,YAAKA,cAAL,GAAsB,IAAtB;AACD,K;;UACDC,e,GAAkB,UAAAC,EAAE,EAAI;AACtB,YAAKF,cAAL,GAAsBE,EAAtB;AACD,K;;;;;;;4CAEuBC,S,EAAWC,S,EAAW;AAAA,UACpCZ,QADoC,GACvB,KAAKD,KADkB,CACpCC,QADoC;;AAG5C,UAAIY,SAAS,CAACZ,QAAV,KAAuBA,QAA3B,EAAqC;AACnC,eAAO;AAAEA,UAAAA,QAAQ,EAARA;AAAF,SAAP;AACD;;AAED,aAAO,IAAP;AACD;;;uCACkBK,K,EAAON,K,EAAOc,Q,EAAU;AACzC,UAAI,CAACA,QAAL,EAAe;AAD0B,UAGjCP,YAHiC,GAGhBD,KAHgB,CAGjCC,YAHiC;AAAA,UAIjCN,QAJiC,GAIpBa,QAJoB,CAIjCb,QAJiC;AAMzC,UAAMc,OAAO,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAASd,QAAQ,GAAG,QAAH,GAAc,SAA/B,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,QAAQ,GACL,4BADK,GAEL,mCAHN,CAFF,CADF;AAWA,UAAMe,QAAQ,GAAGf,QAAQ,GACrB,KAAKI,cADgB,GAErB,KAAKK,eAFT;AAIAH,MAAAA,YAAY,CAACU,GAAb,CAAiBF,OAAjB,EAA0B;AACxBG,QAAAA,UAAU,EAAE,MADY;AAExBC,QAAAA,WAAW,EAAElB;AAFW,OAA1B,EAGGe,QAHH;AAID;;;6BACQ;AACP,aAAO,IAAP;AACD;;;;EAlDgCnB,S;;AAqDnC,eAAeC,gBAAgB,CAACC,oBAAD,CAA/B","sourcesContent":["import React, { Component } from 'react';\nimport { withToastManager } from 'react-toast-notifications';\n\nclass ConnectivityListener extends Component {\n  state = { isOnline: window ? window.navigator.onLine : false };\n\n  // NOTE: add/remove event listeners omitted for brevity\n\n  onlineCallback = () => {\n    this.props.toastManager.remove(this.offlineToastId);\n    this.offlineToastId = null;\n  };\n  offlineCallback = id => {\n    this.offlineToastId = id;\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    const { isOnline } = this.state;\n\n    if (prevState.isOnline !== isOnline) {\n      return { isOnline };\n    }\n\n    return null;\n  }\n  componentDidUpdate(props, state, snapshot) {\n    if (!snapshot) return;\n\n    const { toastManager } = props;\n    const { isOnline } = snapshot;\n\n    const content = (\n      <div>\n        <strong>{isOnline ? 'Online' : \"Offline\"}</strong>\n        <div>\n          {isOnline\n            ? 'Editing is available again'\n            : 'Changes you make may not be saved'}\n        </div>\n      </div>\n    );\n\n    const callback = isOnline\n      ? this.onlineCallback\n      : this.offlineCallback;\n\n    toastManager.add(content, {\n      appearance: 'info',\n      autoDismiss: isOnline,\n    }, callback);\n  }\n  render() {\n    return null;\n  }\n}\n\nexport default withToastManager(ConnectivityListener);"]},"metadata":{},"sourceType":"module"}