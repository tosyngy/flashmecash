{"ast":null,"code":"'use strict'; //This file contains the ES6 extensions to the core Promises/A+ API\n\nvar Promise = require('./core.js');\n\nvar asap = require('asap');\n\nmodule.exports = Promise;\n/* Static Functions */\n\nfunction ValuePromise(value) {\n  this.then = function (onFulfilled) {\n    if (typeof onFulfilled !== 'function') return this;\n    return new Promise(function (resolve, reject) {\n      asap(function () {\n        try {\n          resolve(onFulfilled(value));\n        } catch (ex) {\n          reject(ex);\n        }\n      });\n    });\n  };\n}\n\nValuePromise.prototype = Promise.prototype;\nvar TRUE = new ValuePromise(true);\nvar FALSE = new ValuePromise(false);\nvar NULL = new ValuePromise(null);\nvar UNDEFINED = new ValuePromise(undefined);\nvar ZERO = new ValuePromise(0);\nvar EMPTYSTRING = new ValuePromise('');\n\nPromise.resolve = function (value) {\n  if (value instanceof Promise) return value;\n  if (value === null) return NULL;\n  if (value === undefined) return UNDEFINED;\n  if (value === true) return TRUE;\n  if (value === false) return FALSE;\n  if (value === 0) return ZERO;\n  if (value === '') return EMPTYSTRING;\n\n  if (typeof value === 'object' || typeof value === 'function') {\n    try {\n      var then = value.then;\n\n      if (typeof then === 'function') {\n        return new Promise(then.bind(value));\n      }\n    } catch (ex) {\n      return new Promise(function (resolve, reject) {\n        reject(ex);\n      });\n    }\n  }\n\n  return new ValuePromise(value);\n};\n\nPromise.all = function (arr) {\n  var args = Array.prototype.slice.call(arr);\n  return new Promise(function (resolve, reject) {\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n\n          if (typeof then === 'function') {\n            then.call(val, function (val) {\n              res(i, val);\n            }, reject);\n            return;\n          }\n        }\n\n        args[i] = val;\n\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.reject = function (value) {\n  return new Promise(function (resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function (values) {\n  return new Promise(function (resolve, reject) {\n    values.forEach(function (value) {\n      Promise.resolve(value).then(resolve, reject);\n    });\n  });\n};\n/* Prototype Methods */\n\n\nPromise.prototype['catch'] = function (onRejected) {\n  return this.then(null, onRejected);\n};","map":null,"metadata":{},"sourceType":"script"}